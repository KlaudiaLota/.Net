@page "/weather"
@attribute [StreamRendering]
@rendermode @( new InteractiveServerRenderMode ( false ) )

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<input class="form-control mb-2" @oninput="FilterByText" placeholder="Filtruj po nazwie..." />

<button class="btn btn-primary me-2" @onclick="FilterWarmDays">Filtruj dni > 15°C</button>
<button class="btn btn-secondary" @onclick="Restore">Przywróć</button>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in displayedForecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<p>Liczba dni z temperaturą powyżej 15°C: <strong>@warmDays</strong></p>

@code {
    private WeatherForecast[] forecasts;
    private WeatherForecast[] displayedForecasts;
    private string filterText = "";
    private int warmDays => forecasts?.Count(f => f.TemperatureC > 15) ?? 0;


    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var rng = new Random();
        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };

        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = rng.Next(-20, 55),
            Summary = summaries[rng.Next(summaries.Length)]
        }).ToArray();

        displayedForecasts = forecasts;
    }

    private void FilterWarmDays()
    {
        displayedForecasts = forecasts.Where(f => f.TemperatureC > 15).ToArray();
    }

    private void Restore()
    {
        displayedForecasts = forecasts;
        filterText = "";
    }

    private void FilterByText(ChangeEventArgs e)
    {
        filterText = e.Value?.ToString() ?? "";
        displayedForecasts = forecasts.Where(f =>
            f.Summary.Contains(filterText, StringComparison.OrdinalIgnoreCase)).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
